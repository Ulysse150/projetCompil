# 1 "kawalexer.mll"
 

  open Lexing
  open Kawaparser

  exception Error of string

  let keyword_or_ident =
  let h = Hashtbl.create 17 in
  List.iter (fun (s, k) -> Hashtbl.add h s k)
    [ "print",    PRINT;
      "main",     MAIN;
      "if",       IF;
      "else",     ELSE;
      "var",      VAR;
      "return",   RETURN;
      "attribute", ATT;
      "method",    METH;
      "class",      CLASS;
      "new",       NEW;
      "this",     THIS;
      "void",     VOID;
      "true", TRUE;
      "false", FALSE;
      "int", VARINT;
      "bool", VARBOOL;
      "while", WHILE;
      "instanceof", INSTOF;
      "extends", EXT;
      
    ] ;
  fun s ->
    try  Hashtbl.find h s
    with Not_found -> IDENT(s)
        

# 39 "kawalexer.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\223\255\224\255\225\255\226\255\227\255\228\255\002\000\
    \002\000\001\000\003\000\004\000\240\255\241\255\011\000\244\255\
    \245\255\246\255\247\255\248\255\249\255\079\000\025\000\024\000\
    \002\000\255\255\252\255\002\000\253\255\006\000\007\000\230\255\
    \229\255\238\255\236\255\235\255\234\255\232\255\027\000\253\255\
    \254\255\023\000\255\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\022\000\
    \031\000\031\000\018\000\024\000\255\255\255\255\013\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\005\000\004\000\012\000\
    \001\000\255\255\255\255\255\255\255\255\255\255\016\000\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\001\000\255\255";
  Lexing.lex_default =
   "\002\000\000\000\000\000\000\000\000\000\000\000\000\000\255\255\
    \255\255\255\255\255\255\255\255\000\000\000\000\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\027\000\000\000\255\255\255\255\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\040\000\000\000\
    \000\000\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\024\000\025\000\024\000\028\000\024\000\000\000\024\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \024\000\011\000\024\000\000\000\000\000\006\000\009\000\035\000\
    \019\000\018\000\015\000\013\000\005\000\012\000\004\000\023\000\
    \022\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\029\000\020\000\010\000\014\000\007\000\037\000\
    \034\000\033\000\026\000\032\000\031\000\041\000\042\000\027\000\
    \030\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\003\000\021\000\
    \000\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\017\000\008\000\016\000\036\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\000\000\000\000\021\000\000\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \001\000\000\000\255\255\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\039\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    ";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\024\000\027\000\000\000\255\255\024\000\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\000\000\024\000\255\255\255\255\000\000\000\000\009\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\014\000\000\000\000\000\000\000\000\000\007\000\
    \010\000\011\000\023\000\029\000\030\000\038\000\041\000\023\000\
    \014\000\022\000\022\000\022\000\022\000\022\000\022\000\022\000\
    \022\000\022\000\022\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\000\000\000\000\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\008\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\255\255\255\255\255\255\255\255\021\000\255\255\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\021\000\021\000\021\000\021\000\021\000\021\000\
    \021\000\021\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\027\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\038\000\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    ";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 45 "kawalexer.mll"
                      ( new_line lexbuf; token lexbuf )
# 171 "kawalexer.ml"

  | 1 ->
# 46 "kawalexer.mll"
                      ( token lexbuf )
# 176 "kawalexer.ml"

  | 2 ->
# 48 "kawalexer.mll"
                         ( new_line lexbuf; token lexbuf )
# 181 "kawalexer.ml"

  | 3 ->
# 49 "kawalexer.mll"
                         ( comment lexbuf; token lexbuf )
# 186 "kawalexer.ml"

  | 4 ->
let
# 51 "kawalexer.mll"
              n
# 192 "kawalexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 51 "kawalexer.mll"
                 ( INT(int_of_string n) )
# 196 "kawalexer.ml"

  | 5 ->
let
# 52 "kawalexer.mll"
             id
# 202 "kawalexer.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 52 "kawalexer.mll"
                 ( keyword_or_ident id )
# 206 "kawalexer.ml"

  | 6 ->
# 55 "kawalexer.mll"
         ( SEMI )
# 211 "kawalexer.ml"

  | 7 ->
# 56 "kawalexer.mll"
         ( LPAR )
# 216 "kawalexer.ml"

  | 8 ->
# 57 "kawalexer.mll"
         ( RPAR )
# 221 "kawalexer.ml"

  | 9 ->
# 58 "kawalexer.mll"
         ( BEGIN )
# 226 "kawalexer.ml"

  | 10 ->
# 59 "kawalexer.mll"
         ( END )
# 231 "kawalexer.ml"

  | 11 ->
# 61 "kawalexer.mll"
      (STAR)
# 236 "kawalexer.ml"

  | 12 ->
# 62 "kawalexer.mll"
      (DIV)
# 241 "kawalexer.ml"

  | 13 ->
# 63 "kawalexer.mll"
      (EQ)
# 246 "kawalexer.ml"

  | 14 ->
# 64 "kawalexer.mll"
      (PLUS)
# 251 "kawalexer.ml"

  | 15 ->
# 65 "kawalexer.mll"
      (MINUS)
# 256 "kawalexer.ml"

  | 16 ->
# 66 "kawalexer.mll"
       (DEQ)
# 261 "kawalexer.ml"

  | 17 ->
# 67 "kawalexer.mll"
       (DIFF)
# 266 "kawalexer.ml"

  | 18 ->
# 68 "kawalexer.mll"
      (INF)
# 271 "kawalexer.ml"

  | 19 ->
# 69 "kawalexer.mll"
       (INFEQ)
# 276 "kawalexer.ml"

  | 20 ->
# 70 "kawalexer.mll"
       (AND)
# 281 "kawalexer.ml"

  | 21 ->
# 71 "kawalexer.mll"
       (OR)
# 286 "kawalexer.ml"

  | 22 ->
# 72 "kawalexer.mll"
      (SUP)
# 291 "kawalexer.ml"

  | 23 ->
# 73 "kawalexer.mll"
       (SUPEQ)
# 296 "kawalexer.ml"

  | 24 ->
# 74 "kawalexer.mll"
      (NOT)
# 301 "kawalexer.ml"

  | 25 ->
# 75 "kawalexer.mll"
        (STEQ)
# 306 "kawalexer.ml"

  | 26 ->
# 76 "kawalexer.mll"
        (STDIFF)
# 311 "kawalexer.ml"

  | 27 ->
# 77 "kawalexer.mll"
       (MOD)
# 316 "kawalexer.ml"

  | 28 ->
# 78 "kawalexer.mll"
       (VIRG)
# 321 "kawalexer.ml"

  | 29 ->
# 79 "kawalexer.mll"
       (DOT)
# 326 "kawalexer.ml"

  | 30 ->
# 80 "kawalexer.mll"
      (POW)
# 331 "kawalexer.ml"

  | 31 ->
# 81 "kawalexer.mll"
         ( raise (Error ("unknown character : " ^ lexeme lexbuf)) )
# 336 "kawalexer.ml"

  | 32 ->
# 82 "kawalexer.mll"
         ( EOF )
# 341 "kawalexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

and comment lexbuf =
   __ocaml_lex_comment_rec lexbuf 38
and __ocaml_lex_comment_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 85 "kawalexer.mll"
         ( () )
# 353 "kawalexer.ml"

  | 1 ->
# 86 "kawalexer.mll"
         ( comment lexbuf )
# 358 "kawalexer.ml"

  | 2 ->
# 87 "kawalexer.mll"
         ( raise (Error "unterminated comment") )
# 363 "kawalexer.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_comment_rec lexbuf __ocaml_lex_state

;;

