State 0:
## Known stack suffix:
##
## LR(1) items:
program' -> . program [ # ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 9
-- On program shift to state 11
-- On list(var_decl) shift to state 12
## Reductions:
-- On MAIN
--   reduce production list(var_decl) ->

State 1:
## Known stack suffix:
## VAR
## LR(1) items:
var_decl -> VAR . typ IDENT SEMI [ VAR MAIN ]
## Transitions:
-- On VOID shift to state 2
-- On VARINT shift to state 3
-- On VARBOOL shift to state 4
-- On IDENT shift to state 5
-- On typ shift to state 6
## Reductions:

State 2:
## Known stack suffix:
## VOID
## LR(1) items:
typ -> VOID . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> VOID

State 3:
## Known stack suffix:
## VARINT
## LR(1) items:
typ -> VARINT . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> VARINT

State 4:
## Known stack suffix:
## VARBOOL
## LR(1) items:
typ -> VARBOOL . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> VARBOOL

State 5:
## Known stack suffix:
## IDENT
## LR(1) items:
typ -> IDENT . [ IDENT ]
## Transitions:
## Reductions:
-- On IDENT
--   reduce production typ -> IDENT

State 6:
## Known stack suffix:
## VAR typ
## LR(1) items:
var_decl -> VAR typ . IDENT SEMI [ VAR MAIN ]
## Transitions:
-- On IDENT shift to state 7
## Reductions:

State 7:
## Known stack suffix:
## VAR typ IDENT
## LR(1) items:
var_decl -> VAR typ IDENT . SEMI [ VAR MAIN ]
## Transitions:
-- On SEMI shift to state 8
## Reductions:

State 8:
## Known stack suffix:
## VAR typ IDENT SEMI
## LR(1) items:
var_decl -> VAR typ IDENT SEMI . [ VAR MAIN ]
## Transitions:
## Reductions:
-- On VAR MAIN
--   reduce production var_decl -> VAR typ IDENT SEMI

State 9:
## Known stack suffix:
## var_decl
## LR(1) items:
list(var_decl) -> var_decl . list(var_decl) [ MAIN ]
## Transitions:
-- On VAR shift to state 1
-- On var_decl shift to state 9
-- On list(var_decl) shift to state 10
## Reductions:
-- On MAIN
--   reduce production list(var_decl) ->

State 10:
## Known stack suffix:
## var_decl list(var_decl)
## LR(1) items:
list(var_decl) -> var_decl list(var_decl) . [ MAIN ]
## Transitions:
## Reductions:
-- On MAIN
--   reduce production list(var_decl) -> var_decl list(var_decl)

State 11:
## Known stack suffix:
## program
## LR(1) items:
program' -> program . [ # ]
## Transitions:
## Reductions:
-- On #
--   accept program

State 12:
## Known stack suffix:
## list(var_decl)
## LR(1) items:
program -> list(var_decl) . MAIN BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On MAIN shift to state 13
## Reductions:

State 13:
## Known stack suffix:
## list(var_decl) MAIN
## LR(1) items:
program -> list(var_decl) MAIN . BEGIN list(instruction) END EOF [ # ]
## Transitions:
-- On BEGIN shift to state 14
## Reductions:

State 14:
## Known stack suffix:
## list(var_decl) MAIN BEGIN
## LR(1) items:
program -> list(var_decl) MAIN BEGIN . list(instruction) END EOF [ # ]
## Transitions:
-- On WHILE shift to state 15
-- On PRINT shift to state 60
-- On IF shift to state 65
-- On IDENT shift to state 70
-- On mem shift to state 71
-- On list(instruction) shift to state 85
-- On instruction shift to state 81
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 15:
## Known stack suffix:
## WHILE
## LR(1) items:
instruction -> WHILE . LPAR expression RPAR BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On LPAR shift to state 16
## Reductions:

State 16:
## Known stack suffix:
## WHILE LPAR
## LR(1) items:
instruction -> WHILE LPAR . expression RPAR BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 57
## Reductions:

State 17:
## Known stack suffix:
## TRUE
## LR(1) items:
expression -> TRUE . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
## Reductions:
-- On SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND
--   reduce production expression -> TRUE

State 18:
## Known stack suffix:
## NOT
## LR(1) items:
uop -> NOT . [ TRUE NOT MINUS LPAR INT IDENT FALSE ]
## Transitions:
## Reductions:
-- On TRUE NOT MINUS LPAR INT IDENT FALSE
--   reduce production uop -> NOT

State 19:
## Known stack suffix:
## MINUS
## LR(1) items:
expression -> MINUS . INT [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
uop -> MINUS . [ TRUE NOT MINUS LPAR INT IDENT FALSE ]
## Transitions:
-- On INT shift to state 20
## Reductions:
-- On TRUE NOT MINUS LPAR INT IDENT FALSE
--   reduce production uop -> MINUS
** Conflict on INT

State 20:
## Known stack suffix:
## MINUS INT
## LR(1) items:
expression -> MINUS INT . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
## Reductions:
-- On SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND
--   reduce production expression -> MINUS INT

State 21:
## Known stack suffix:
## LPAR
## LR(1) items:
expression -> LPAR . expression RPAR [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 55
## Reductions:

State 22:
## Known stack suffix:
## INT
## LR(1) items:
expression -> INT . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
## Reductions:
-- On SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND
--   reduce production expression -> INT

State 23:
## Known stack suffix:
## IDENT
## LR(1) items:
expression -> IDENT . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
## Reductions:
-- On SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND
--   reduce production expression -> IDENT

State 24:
## Known stack suffix:
## FALSE
## LR(1) items:
expression -> FALSE . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
## Reductions:
-- On SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND
--   reduce production expression -> FALSE

State 25:
## Known stack suffix:
## uop
## LR(1) items:
expression -> uop . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 26
## Reductions:

State 26:
## Known stack suffix:
## uop expression
## LR(1) items:
expression -> uop expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On SUPEQ shift to state 27
-- On SUP shift to state 45
-- On STAR shift to state 29
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On INFEQ shift to state 47
-- On INF shift to state 49
-- On DIV shift to state 37
-- On DIFF shift to state 51
-- On DEQ shift to state 53
-- On AND shift to state 43
## Reductions:
-- On SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND
--   reduce production expression -> uop expression
** Conflict on SUPEQ SUP STAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND

State 27:
## Known stack suffix:
## expression SUPEQ
## LR(1) items:
expression -> expression SUPEQ . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 28
## Reductions:

State 28:
## Known stack suffix:
## expression SUPEQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression SUPEQ expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On STAR shift to state 29
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On DIV shift to state 37
-- On AND shift to state 43
## Reductions:
-- On SUPEQ SUP SEMI RPAR INFEQ INF DIFF DEQ
--   reduce production expression -> expression SUPEQ expression

State 29:
## Known stack suffix:
## expression STAR
## LR(1) items:
expression -> expression STAR . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 30
## Reductions:

State 30:
## Known stack suffix:
## expression STAR expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression STAR expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On POW shift to state 31
## Reductions:
-- On SUPEQ SUP STAR SEMI RPAR PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND
--   reduce production expression -> expression STAR expression

State 31:
## Known stack suffix:
## expression POW
## LR(1) items:
expression -> expression POW . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 32
## Reductions:

State 32:
## Known stack suffix:
## expression POW expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression POW expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
## Reductions:
-- On SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND
--   reduce production expression -> expression POW expression

State 33:
## Known stack suffix:
## expression PLUS
## LR(1) items:
expression -> expression PLUS . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 34
## Reductions:

State 34:
## Known stack suffix:
## expression PLUS expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression PLUS expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On STAR shift to state 29
-- On POW shift to state 31
-- On MOD shift to state 35
-- On DIV shift to state 37
## Reductions:
-- On SUPEQ SUP SEMI RPAR PLUS OR MINUS INFEQ INF DIFF DEQ AND
--   reduce production expression -> expression PLUS expression

State 35:
## Known stack suffix:
## expression MOD
## LR(1) items:
expression -> expression MOD . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 36
## Reductions:

State 36:
## Known stack suffix:
## expression MOD expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression MOD expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On STAR shift to state 29
-- On POW shift to state 31
-- On DIV shift to state 37
## Reductions:
-- On SUPEQ SUP SEMI RPAR PLUS OR MOD MINUS INFEQ INF DIFF DEQ AND
--   reduce production expression -> expression MOD expression

State 37:
## Known stack suffix:
## expression DIV
## LR(1) items:
expression -> expression DIV . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 38
## Reductions:

State 38:
## Known stack suffix:
## expression DIV expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression DIV expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On POW shift to state 31
## Reductions:
-- On SUPEQ SUP STAR SEMI RPAR PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND
--   reduce production expression -> expression DIV expression

State 39:
## Known stack suffix:
## expression OR
## LR(1) items:
expression -> expression OR . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 40
## Reductions:

State 40:
## Known stack suffix:
## expression OR expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression OR expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On STAR shift to state 29
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On DIV shift to state 37
## Reductions:
-- On SUPEQ SUP SEMI RPAR OR INFEQ INF DIFF DEQ AND
--   reduce production expression -> expression OR expression

State 41:
## Known stack suffix:
## expression MINUS
## LR(1) items:
expression -> expression MINUS . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 42
## Reductions:

State 42:
## Known stack suffix:
## expression MINUS expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression MINUS expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On STAR shift to state 29
-- On POW shift to state 31
-- On MOD shift to state 35
-- On DIV shift to state 37
## Reductions:
-- On SUPEQ SUP SEMI RPAR PLUS OR MINUS INFEQ INF DIFF DEQ AND
--   reduce production expression -> expression MINUS expression

State 43:
## Known stack suffix:
## expression AND
## LR(1) items:
expression -> expression AND . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 44
## Reductions:

State 44:
## Known stack suffix:
## expression AND expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression AND expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On STAR shift to state 29
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On DIV shift to state 37
## Reductions:
-- On SUPEQ SUP SEMI RPAR OR INFEQ INF DIFF DEQ AND
--   reduce production expression -> expression AND expression

State 45:
## Known stack suffix:
## expression SUP
## LR(1) items:
expression -> expression SUP . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 46
## Reductions:

State 46:
## Known stack suffix:
## expression SUP expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression SUP expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On STAR shift to state 29
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On DIV shift to state 37
-- On AND shift to state 43
## Reductions:
-- On SUPEQ SUP SEMI RPAR INFEQ INF DIFF DEQ
--   reduce production expression -> expression SUP expression

State 47:
## Known stack suffix:
## expression INFEQ
## LR(1) items:
expression -> expression INFEQ . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 48
## Reductions:

State 48:
## Known stack suffix:
## expression INFEQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression INFEQ expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On STAR shift to state 29
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On DIV shift to state 37
-- On AND shift to state 43
## Reductions:
-- On SUPEQ SUP SEMI RPAR INFEQ INF DIFF DEQ
--   reduce production expression -> expression INFEQ expression

State 49:
## Known stack suffix:
## expression INF
## LR(1) items:
expression -> expression INF . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 50
## Reductions:

State 50:
## Known stack suffix:
## expression INF expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression INF expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On STAR shift to state 29
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On DIV shift to state 37
-- On AND shift to state 43
## Reductions:
-- On SUPEQ SUP SEMI RPAR INFEQ INF DIFF DEQ
--   reduce production expression -> expression INF expression

State 51:
## Known stack suffix:
## expression DIFF
## LR(1) items:
expression -> expression DIFF . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 52
## Reductions:

State 52:
## Known stack suffix:
## expression DIFF expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression DIFF expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On STAR shift to state 29
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On DIV shift to state 37
-- On AND shift to state 43
## Reductions:
-- On SUPEQ SUP SEMI RPAR INFEQ INF DIFF DEQ
--   reduce production expression -> expression DIFF expression

State 53:
## Known stack suffix:
## expression DEQ
## LR(1) items:
expression -> expression DEQ . expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 54
## Reductions:

State 54:
## Known stack suffix:
## expression DEQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression DEQ expression . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On STAR shift to state 29
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On DIV shift to state 37
-- On AND shift to state 43
## Reductions:
-- On SUPEQ SUP SEMI RPAR INFEQ INF DIFF DEQ
--   reduce production expression -> expression DEQ expression

State 55:
## Known stack suffix:
## LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> LPAR expression . RPAR [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
-- On SUPEQ shift to state 27
-- On SUP shift to state 45
-- On STAR shift to state 29
-- On RPAR shift to state 56
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On INFEQ shift to state 47
-- On INF shift to state 49
-- On DIV shift to state 37
-- On DIFF shift to state 51
-- On DEQ shift to state 53
-- On AND shift to state 43
## Reductions:

State 56:
## Known stack suffix:
## LPAR expression RPAR
## LR(1) items:
expression -> LPAR expression RPAR . [ SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
## Transitions:
## Reductions:
-- On SUPEQ SUP STAR SEMI RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND
--   reduce production expression -> LPAR expression RPAR

State 57:
## Known stack suffix:
## WHILE LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
instruction -> WHILE LPAR expression . RPAR BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On SUPEQ shift to state 27
-- On SUP shift to state 45
-- On STAR shift to state 29
-- On RPAR shift to state 58
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On INFEQ shift to state 47
-- On INF shift to state 49
-- On DIV shift to state 37
-- On DIFF shift to state 51
-- On DEQ shift to state 53
-- On AND shift to state 43
## Reductions:

State 58:
## Known stack suffix:
## WHILE LPAR expression RPAR
## LR(1) items:
instruction -> WHILE LPAR expression RPAR . BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On BEGIN shift to state 59
## Reductions:

State 59:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN . list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On WHILE shift to state 15
-- On PRINT shift to state 60
-- On IF shift to state 65
-- On IDENT shift to state 70
-- On mem shift to state 71
-- On list(instruction) shift to state 83
-- On instruction shift to state 81
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 60:
## Known stack suffix:
## PRINT
## LR(1) items:
instruction -> PRINT . LPAR expression RPAR SEMI [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On LPAR shift to state 61
## Reductions:

State 61:
## Known stack suffix:
## PRINT LPAR
## LR(1) items:
instruction -> PRINT LPAR . expression RPAR SEMI [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 62
## Reductions:

State 62:
## Known stack suffix:
## PRINT LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
instruction -> PRINT LPAR expression . RPAR SEMI [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On SUPEQ shift to state 27
-- On SUP shift to state 45
-- On STAR shift to state 29
-- On RPAR shift to state 63
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On INFEQ shift to state 47
-- On INF shift to state 49
-- On DIV shift to state 37
-- On DIFF shift to state 51
-- On DEQ shift to state 53
-- On AND shift to state 43
## Reductions:

State 63:
## Known stack suffix:
## PRINT LPAR expression RPAR
## LR(1) items:
instruction -> PRINT LPAR expression RPAR . SEMI [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On SEMI shift to state 64
## Reductions:

State 64:
## Known stack suffix:
## PRINT LPAR expression RPAR SEMI
## LR(1) items:
instruction -> PRINT LPAR expression RPAR SEMI . [ WHILE PRINT IF IDENT END ]
## Transitions:
## Reductions:
-- On WHILE PRINT IF IDENT END
--   reduce production instruction -> PRINT LPAR expression RPAR SEMI

State 65:
## Known stack suffix:
## IF
## LR(1) items:
instruction -> IF . LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On LPAR shift to state 66
## Reductions:

State 66:
## Known stack suffix:
## IF LPAR
## LR(1) items:
instruction -> IF LPAR . expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 67
## Reductions:

State 67:
## Known stack suffix:
## IF LPAR expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR RPAR POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
instruction -> IF LPAR expression . RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On SUPEQ shift to state 27
-- On SUP shift to state 45
-- On STAR shift to state 29
-- On RPAR shift to state 68
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On INFEQ shift to state 47
-- On INF shift to state 49
-- On DIV shift to state 37
-- On DIFF shift to state 51
-- On DEQ shift to state 53
-- On AND shift to state 43
## Reductions:

State 68:
## Known stack suffix:
## IF LPAR expression RPAR
## LR(1) items:
instruction -> IF LPAR expression RPAR . BEGIN list(instruction) END ELSE BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On BEGIN shift to state 69
## Reductions:

State 69:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN . list(instruction) END ELSE BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On WHILE shift to state 15
-- On PRINT shift to state 60
-- On IF shift to state 65
-- On IDENT shift to state 70
-- On mem shift to state 71
-- On list(instruction) shift to state 75
-- On instruction shift to state 81
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 70:
## Known stack suffix:
## IDENT
## LR(1) items:
mem -> IDENT . [ EQ ]
## Transitions:
## Reductions:
-- On EQ
--   reduce production mem -> IDENT

State 71:
## Known stack suffix:
## mem
## LR(1) items:
instruction -> mem . EQ expression SEMI [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On EQ shift to state 72
## Reductions:

State 72:
## Known stack suffix:
## mem EQ
## LR(1) items:
instruction -> mem EQ . expression SEMI [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On TRUE shift to state 17
-- On NOT shift to state 18
-- On MINUS shift to state 19
-- On LPAR shift to state 21
-- On INT shift to state 22
-- On IDENT shift to state 23
-- On FALSE shift to state 24
-- On uop shift to state 25
-- On expression shift to state 73
## Reductions:

State 73:
## Known stack suffix:
## mem EQ expression
## LR(1) items:
expression -> expression . PLUS expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MOD expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INFEQ expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . OR expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . MINUS expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DEQ expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUP expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . POW expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . STAR expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIFF expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . SUPEQ expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . DIV expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . INF expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
expression -> expression . AND expression [ SUPEQ SUP STAR SEMI POW PLUS OR MOD MINUS INFEQ INF DIV DIFF DEQ AND ]
instruction -> mem EQ expression . SEMI [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On SUPEQ shift to state 27
-- On SUP shift to state 45
-- On STAR shift to state 29
-- On SEMI shift to state 74
-- On POW shift to state 31
-- On PLUS shift to state 33
-- On OR shift to state 39
-- On MOD shift to state 35
-- On MINUS shift to state 41
-- On INFEQ shift to state 47
-- On INF shift to state 49
-- On DIV shift to state 37
-- On DIFF shift to state 51
-- On DEQ shift to state 53
-- On AND shift to state 43
## Reductions:

State 74:
## Known stack suffix:
## mem EQ expression SEMI
## LR(1) items:
instruction -> mem EQ expression SEMI . [ WHILE PRINT IF IDENT END ]
## Transitions:
## Reductions:
-- On WHILE PRINT IF IDENT END
--   reduce production instruction -> mem EQ expression SEMI

State 75:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) . END ELSE BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On END shift to state 76
## Reductions:

State 76:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END . ELSE BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On ELSE shift to state 77
## Reductions:

State 77:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE . BEGIN list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On BEGIN shift to state 78
## Reductions:

State 78:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN . list(instruction) END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On WHILE shift to state 15
-- On PRINT shift to state 60
-- On IF shift to state 65
-- On IDENT shift to state 70
-- On mem shift to state 71
-- On list(instruction) shift to state 79
-- On instruction shift to state 81
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 79:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction)
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) . END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On END shift to state 80
## Reductions:

State 80:
## Known stack suffix:
## IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END
## LR(1) items:
instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END . [ WHILE PRINT IF IDENT END ]
## Transitions:
## Reductions:
-- On WHILE PRINT IF IDENT END
--   reduce production instruction -> IF LPAR expression RPAR BEGIN list(instruction) END ELSE BEGIN list(instruction) END

State 81:
## Known stack suffix:
## instruction
## LR(1) items:
list(instruction) -> instruction . list(instruction) [ END ]
## Transitions:
-- On WHILE shift to state 15
-- On PRINT shift to state 60
-- On IF shift to state 65
-- On IDENT shift to state 70
-- On mem shift to state 71
-- On list(instruction) shift to state 82
-- On instruction shift to state 81
## Reductions:
-- On END
--   reduce production list(instruction) ->

State 82:
## Known stack suffix:
## instruction list(instruction)
## LR(1) items:
list(instruction) -> instruction list(instruction) . [ END ]
## Transitions:
## Reductions:
-- On END
--   reduce production list(instruction) -> instruction list(instruction)

State 83:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction)
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) . END [ WHILE PRINT IF IDENT END ]
## Transitions:
-- On END shift to state 84
## Reductions:

State 84:
## Known stack suffix:
## WHILE LPAR expression RPAR BEGIN list(instruction) END
## LR(1) items:
instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END . [ WHILE PRINT IF IDENT END ]
## Transitions:
## Reductions:
-- On WHILE PRINT IF IDENT END
--   reduce production instruction -> WHILE LPAR expression RPAR BEGIN list(instruction) END

State 85:
## Known stack suffix:
## list(var_decl) MAIN BEGIN list(instruction)
## LR(1) items:
program -> list(var_decl) MAIN BEGIN list(instruction) . END EOF [ # ]
## Transitions:
-- On END shift to state 86
## Reductions:

State 86:
## Known stack suffix:
## list(var_decl) MAIN BEGIN list(instruction) END
## LR(1) items:
program -> list(var_decl) MAIN BEGIN list(instruction) END . EOF [ # ]
## Transitions:
-- On EOF shift to state 87
## Reductions:

State 87:
## Known stack suffix:
## list(var_decl) MAIN BEGIN list(instruction) END EOF
## LR(1) items:
program -> list(var_decl) MAIN BEGIN list(instruction) END EOF . [ # ]
## Transitions:
## Reductions:
-- On #
--   reduce production program -> list(var_decl) MAIN BEGIN list(instruction) END EOF

